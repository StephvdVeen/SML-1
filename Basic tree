#library
library(zoo)


#split function
split <- function(X, y){
  X <- data.frame(X)
  #dataframe for storing sse of splitting points for each variable
  sse_full <- data.frame(X)[1,]
  
  #loop
  for (j in length(colnames(X))){
    X_split <- X[,j]
    splits <- sort(unique(X_split))
    sse <- c()
    for (i in seq_along(splits)){
      sp <- splits[i]
      sse[i] <- sum((y[X_split < sp] - mean(y[X_split < sp])^2)) + 
        sum((y[X_split >= sp] - mean(y[X_split >= sp]))^2)
    }
    sse_full[1,j] <- min(sse)  
  }
  
  split_at_full <- splits[which.min(sse_full)]
  split_at_variable <- colnames(X)[which.min(sse_full)]
  return (c(variable = split_at_variable, sse = min(sse_full), split = split_at_full))
}

#while loop
#initialization
k <- 0
maxdepth <- 3
minobs <- 50

tree_info <- data.frame(node = 1, nobs = nrow(data), status = "split", level = 1,  
                      splitpoint = 1, splitvariable = "Variable")

while (k <= maxdepth) {
  k <- k + 1
  for (i in length(which(tree_info$level == k))) {
    #selecting the node
    branch <- tree_info[which(tree_info$level == k),][i,]
  
    if (branch$nobs > minobs & branch$status == "split"){
      temp_result <- split(X, y)
      
      node <- branch$node
      nobs <- branch$nobs
      status <- "split"
      level <- k
      splitpoint <- temp_result[3] 
      splitvariable <- temp_result[1]
      
      new_branch <- c(node, nobs, status, level, splitpoint, splitvariable)
      
      #children branches
      if (length(which(X$splitvariable < splitpoint)) > nobs){
        c_status1 <- "split"
        c_nobs1 <- length(which(X$splitvariable < splitpoint))
        
      } else {
        c_status1 <- "leaf"
        c_nobs1 <- length(which(X$splitvariable < splitpoint))
      }
      
      if (length(which(X$splitvariable > splitpoint)) > nobs){
        c_nobs <- length(which(X$splitvariable > splitpoint))
        c_status2 <- "split"
        
      } else {
        c_nobs2 <- length(which(X$splitvariable > splitpoint))
          c_status2 <- "leaf"
      }
      
      children <- data.frame(c_node = c(2 * node, 2 * node + 1),
                             c_nobs = c(c_nobs1,c_nobs2), status = c(c_status1,c_status2),
                             level = c(k+1, k+1), splitpoint = c(NA, NA), splitvariable = c("NA","NA")
                            )
      
      #overwrite state of current node
      tree_info[node, ] <- new_branch
  
      #bind everything
      tree_info <- rbind(tree_info, children)
      
      
    }else{
      node <- branch$node
      nobs <- branch$nobs
      status <- "leaf"
      level <- k
      splitpoint <- temp_result[3] 
      splitvariable <- temp_result[1]
      
      new_branch <- c(node, nobs, status, level, splitpoint, splitvariable)
      
      tree_info[node, ] <- new_brach
    }
    
  }
}


#####MAIN####
